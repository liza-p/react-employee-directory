{"version":3,"sources":["components/Navbar.js","components/Table.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","Table","props","console","log","scope","onClick","onSort","users","map","user","i","key","firstName","lastName","role","salary","DOB","Search","class","type","placeholder","aria-label","name","onChange","App","useState","sortCol","setSortCol","sortDir","setSortDir","search","setSearch","displayedUsers","filter","toLowerCase","includes","sort","u1","u2","event","target","value","col","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qgDAYeA,MAVf,WACE,OACC,6BACC,yBAAKC,UAAU,gCACb,uBAAGA,UAAU,+BAA+BC,KAAK,KAAjD,0BC6BSC,MAjCf,SAAeC,GAEb,OADAC,QAAQC,IAAIF,GAEZ,2BAAOH,UAAU,gCACjB,+BACE,wBAAIA,UAAU,cACZ,wBAAIM,MAAM,OAAM,uBAAIL,KAAK,IAAIM,QAAS,kBAAMJ,EAAMK,OAAO,eAAzC,eAChB,wBAAIF,MAAM,OAAM,uBAAIL,KAAK,IAAIM,QAAS,kBAAMJ,EAAMK,OAAO,cAAzC,cAChB,wBAAIF,MAAM,OAAM,uBAAIL,KAAK,IAAIM,QAAS,kBAAMJ,EAAMK,OAAO,UAAzC,SAChB,wBAAIF,MAAM,OAAM,uBAAIL,KAAK,IAAIM,QAAS,kBAAMJ,EAAMK,OAAO,YAAzC,WAChB,wBAAIF,MAAM,OAAV,SAGJ,+BACGH,EAAMM,MAAMC,KAAI,SAASC,EAAKC,GAC7B,OACE,wBAAIC,IAAKD,GAET,4BAAKD,EAAKG,WACV,4BAAKH,EAAKI,UACV,4BAAKJ,EAAKK,MACV,4BAAKL,EAAKM,QACV,4BAAKN,EAAKO,YCPHC,MAff,SAAgBhB,GAEd,OACE,0BAAMiB,MAAM,yBACV,2BACEA,MAAM,uBACNC,KAAK,OAAOC,YAAY,SACxBC,aAAW,SAASC,KAAK,SACzBC,SAAUtB,EAAMsB,WAGlB,4BAAQL,MAAM,uCAAuCC,KAAK,UAA1D,Y,OCiESK,MAvEf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNC,EADM,KACGC,EADH,OAEiBF,mBAAS,OAF1B,mBAENG,EAFM,KAEGC,EAFH,OAGeJ,mBAAS,IAHxB,mBAGNK,EAHM,KAGEC,EAHF,KAeTC,EAAiBzB,EAAM0B,QAAO,SAASxB,GACzC,QAAGA,EAAKG,UAAUsB,cAAcC,SAASL,EAAOI,mBAG7CzB,EAAKI,SAASqB,cAAcC,SAASL,EAAOI,kBAG5CzB,EAAKK,KAAKoB,cAAcC,SAASL,EAAOI,mBAkC7C,MA3BgB,QAAZN,EACFI,EAAeI,MAAK,SAAUC,EAAIC,GAChC,OAAID,EAAGX,GAAWY,EAAGZ,GACZ,EAELW,EAAGX,GAAWY,EAAGZ,IACX,EAEH,KAGTM,EAAeI,MAAK,SAAUC,EAAIC,GAChC,OAAID,EAAGX,GAAWY,EAAGZ,IACX,EAENW,EAAGX,GAAWY,EAAGZ,GACZ,EAEF,KAUT,yBAAK5B,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,aACb,kBAAC,EAAD,CAAQyB,SATY,SAAUgB,GAClCrC,QAAQC,IAAIoC,EAAMC,QAClBT,EAAUQ,EAAMC,OAAOC,UAQnB,kBAAC,EAAD,CAAOlC,MAAOyB,EAAgB1B,OAxDrB,SAAUoC,GACvBf,EAAWe,GAETb,EADc,QAAZD,EACS,OAEA,aCLGe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1D,QAAQ0D,MAAMA,EAAMC,c","file":"static/js/main.d3590533.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Navbar(){\n  return(\n   <div>\n    <nav className=\"navbar navbar-light bg-light\">\n      <a className=\"navbar-brand ml-auto mr-auto\" href=\"#\"> Employee Directory</a>\n    </nav>\n\n    </div>\n  )\n}\nexport default Navbar;","import React from \"react\";\n\nfunction Table(props){\n  console.log(props)\n  return (\n  <table className=\"table table-hover table-dark\">\n  <thead>\n    <tr className=\"bg-success\">\n      <th scope=\"col\"><a  href=\"#\" onClick={() => props.onSort(\"firstName\")}>First Name</a></th>\n      <th scope=\"col\"><a  href=\"#\" onClick={() => props.onSort(\"lastName\")}>Last Name</a></th>\n      <th scope=\"col\"><a  href=\"#\" onClick={() => props.onSort(\"role\")}>Role</a></th>\n      <th scope=\"col\"><a  href=\"#\" onClick={() => props.onSort(\"salary\")}>Salary</a></th>\n      <th scope=\"col\">DOB</th>\n    </tr>\n  </thead>\n  <tbody>\n    {props.users.map(function(user,i){\n      return(\n        <tr key={i}>\n\n        <td>{user.firstName}</td>\n        <td>{user.lastName}</td>\n        <td>{user.role}</td>\n        <td>{user.salary}</td>\n        <td>{user.DOB}</td>\n      </tr>\n      )\n    })\n    }\n    \n  </tbody>\n</table>\n)\n}\n\nexport default Table;\n\n","import React, {useState} from \"react\";\n\nfunction Search(props) {\n\n  return (\n    <form class=\"form-inline mt-3 mb-3\">\n      <input \n        class=\"form-control mr-sm-2\" \n        type=\"text\" placeholder=\"Search\" \n        aria-label=\"Search\" name=\"search\" \n        onChange={props.onChange} \n        // value={props.search} \n      />\n      <button class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\n    </form>\n  )\n}\nexport default Search;","import React, { useState } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Table from './components/Table';\nimport Search from './components/Search';\nimport users from \"./users.json\";\n\nfunction App() {\n  const [sortCol, setSortCol] = useState(\"\");\n  const [sortDir, setSortDir] = useState(\"asc\");\n  const [search, setSearch] = useState(\"\");\n\n  const onSort = function (col) {\n    setSortCol(col);\n    if (sortDir === \"asc\") {\n      setSortDir(\"desc\")\n    } else {\n      setSortDir(\"asc\")\n    }\n    \n  }\n\n  let displayedUsers = users.filter(function(user){\n    if(user.firstName.toLowerCase().includes(search.toLowerCase())){\n      return true;\n    }\n    if(user.lastName.toLowerCase().includes(search.toLowerCase())){\n      return true;\n    }\n    if(user.role.toLowerCase().includes(search.toLowerCase())){\n      return true;\n    }\n    return false;\n  \n  });\n\n  if (sortDir === \"asc\") {\n    displayedUsers.sort(function (u1, u2) {\n      if (u1[sortCol] > u2[sortCol]) {\n        return 1;\n      }\n      if (u1[sortCol] < u2[sortCol]) {\n        return -1;\n      }\n      return 0;\n    })\n  } else {\n    displayedUsers.sort(function (u1, u2) {\n      if (u1[sortCol] > u2[sortCol]) {\n        return -1;\n      }\n      if (u1[sortCol] < u2[sortCol]) {\n        return 1;\n      }\n      return 0;\n    })\n  }\n\n  const handleInputChange = function (event) {\n    console.log(event.target);\n    setSearch(event.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <div className=\"container\">\n        <Search onChange = {handleInputChange}/>\n        <Table users={displayedUsers} onSort={onSort} />\n      </div>\n    </div>\n  );\n\n\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}